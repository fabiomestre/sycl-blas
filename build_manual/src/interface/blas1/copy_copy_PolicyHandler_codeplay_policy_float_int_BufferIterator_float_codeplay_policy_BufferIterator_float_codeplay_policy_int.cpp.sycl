//==-------------------------------------------------------==//
//
// WARNING: This file is auto-generated. Do not modify.
//
// SYCL Device Compiler:
//   Codeplay ComputeCpp - CE 2.11.0 Device Compiler (Experimental) - clang version 15.0.0
//
//==-------------------------------------------------------==//
#ifndef CODEPLAY_SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_STUB
#define CODEPLAY_SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_STUB

#include <SYCL/sycl_ih.hpp>

namespace cl {
namespace sycl {
namespace detail {
namespace {
// SYCL kernel traits primary template
template <typename T>
struct kernel_info;

 static_assert(2== COMPUTECPP_VERSION_MAJOR &&
11== COMPUTECPP_VERSION_MINOR &&
0== COMPUTECPP_VERSION_PATCH,"Error: Mismatch between compiler and runtime. Please ensure both are at the latest version. Compiler is version:2.11.0 Runtime: " __COMPUTECPP__ );

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace cl {
namespace sycl {
namespace detail {
namespace {
unsigned char SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64[] = {
  0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0e, 0x00, 0x06, 0x00,
  0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x4f, 0x70, 0x65, 0x6e, 0x43, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x00, 0x00,
  0x0e, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x53, 0x59, 0x43, 0x4c, 0x5f, 0x5f, 0x5a, 0x54, 0x53, 0x4e, 0x34, 0x62,
  0x6c, 0x61, 0x73, 0x32, 0x31, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
  0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
  0x6f, 0x72, 0x49, 0x4c, 0x69, 0x31, 0x45, 0x4e, 0x53, 0x5f, 0x36, 0x41,
  0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x4e, 0x53, 0x5f, 0x31, 0x30, 0x56,
  0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x49, 0x66, 0x4e,
  0x32, 0x63, 0x6c, 0x34, 0x73, 0x79, 0x63, 0x6c, 0x38, 0x61, 0x63, 0x63,
  0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x66, 0x4c, 0x69, 0x31, 0x45, 0x4c,
  0x4e, 0x53, 0x34, 0x5f, 0x36, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x34,
  0x6d, 0x6f, 0x64, 0x65, 0x45, 0x32, 0x45, 0x4c, 0x4e, 0x53, 0x36, 0x5f,
  0x36, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x31, 0x45, 0x4c, 0x4e,
  0x53, 0x36, 0x5f, 0x31, 0x31, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
  0x6c, 0x64, 0x65, 0x72, 0x45, 0x31, 0x45, 0x45, 0x45, 0x69, 0x69, 0x45,
  0x45, 0x53, 0x42, 0x5f, 0x45, 0x45, 0x4e, 0x53, 0x5f, 0x31, 0x31, 0x4c,
  0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x76,
  0x4c, 0x69, 0x31, 0x45, 0x45, 0x45, 0x76, 0x45, 0x45, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x70, 0x8e, 0x01, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x5f, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x76, 0x5f, 0x42, 0x75, 0x69, 0x6c,
  0x74, 0x49, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76,
  0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x49, 0x00, 0x02, 0x00, 0x26, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x04, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x47, 0x00, 0x0d, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x29, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x76, 0x5f,
  0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
  0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
  0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x04, 0x00,
  0x26, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x0a, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x04, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0xb1, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0xf8, 0x00, 0x02, 0x00, 0x14, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x46, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x46, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x84, 0x00, 0x05, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x46, 0x00, 0x05, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x84, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x72, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x46, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x25, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
  0x3e, 0x00, 0x05, 0x00, 0x25, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00,
  0x15, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x15, 0x00, 0x00, 0x00,
  0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
};
const char *const SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_features[] = {
  0
};
const kernel_binary_info SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_info = {
  "spirv64",
  64,
  SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64,
  sizeof(SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64),
  SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_features
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace blas {
template <typename value_t, int using_local_memory> struct LocalMemory;
} // namespace blas

namespace cl {
namespace sycl {
namespace access {
enum class placeholder : int;
} // namespace access
} // namespace sycl
} // namespace cl

namespace cl {
namespace sycl {
namespace access {
enum class target : unsigned int;
} // namespace access
} // namespace sycl
} // namespace cl

namespace cl {
namespace sycl {
namespace access {
enum class mode : unsigned int;
} // namespace access
} // namespace sycl
} // namespace cl

namespace cl {
namespace sycl {
template <typename elemT, int kDims, access::mode kMode, access::target kTarget, access::placeholder IsPlaceholder> class accessor;
} // namespace sycl
} // namespace cl

namespace blas {
template <typename view_value_t, typename view_container_t, typename view_index_t, typename view_increment_t> struct VectorView;
} // namespace blas

namespace blas {
template <typename lhs_t, typename rhs_t> struct Assign;
} // namespace blas

namespace blas {
template <int using_local_memory, typename expression_tree_t, typename local_memory_t, typename value_t> struct ExpressionTreeFunctor;
} // namespace blas

//
// SYCL kernel info for: ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void>
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_definition<19> bin_info[];

  static const std::array<field_descriptor, 11> fields;
  static const std::array<::cl::sycl::detail::parameter_kind, 19> arg_desc;

struct /* LocalMemory */ type_id_1 {
  };
using type_id_8 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_7 {
  type_id_8 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_6 : type_id_7 {
  };
struct /* accessor_buffer_interface */ type_id_5 : type_id_6 {
  };
struct /* accessor */ alignas(8) type_id_4 : type_id_5 {
  };
using type_id_9 = type_id_4; // container_t
using type_id_10 = int; // index_t
using type_id_11 = int; // increment_t
struct /* vec_ptr_class_base */ type_id_14 {
  };
using type_id_15 = void *; // asp_pointer_t
struct /* multi_ptr_base */ type_id_13 : type_id_14 {
  type_id_15 var_id_0; // m_elem
  };
struct /* multi_ptr */ type_id_12 : type_id_13 {
  };
struct /* VectorView */ type_id_3 {
  type_id_9 var_id_0; // data_
  type_id_10 var_id_1; // size_
  type_id_10 var_id_2; // disp_
  type_id_11 var_id_3; // stride_
  type_id_12 var_id_4; // ptr_
  };
struct /* Assign */ type_id_2 {
  type_id_3 var_id_0; // lhs_
  type_id_3 var_id_1; // rhs_
  };
struct /* ExpressionTreeFunctor */ type_id_0 {
  type_id_1 var_id_0; // scratch_
  type_id_2 var_id_1; // t_
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 11> kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> >::fields = {{
  { sizeof(mirror_type_0::var_id_0),
    offsetof(mirror_type_0, var_id_0),
    ::cl::sycl::detail::parameter_class::user_defined,
    0 },
  { sizeof(mirror_type_0::var_id_1.var_id_0.var_id_0.var_id_0),
    offsetof(mirror_type_0, var_id_1.var_id_0.var_id_0.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    1 },
  { sizeof(mirror_type_0::var_id_1.var_id_0.var_id_1),
    offsetof(mirror_type_0, var_id_1.var_id_0.var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    6 },
  { sizeof(mirror_type_0::var_id_1.var_id_0.var_id_2),
    offsetof(mirror_type_0, var_id_1.var_id_0.var_id_2),
    ::cl::sycl::detail::parameter_class::user_defined,
    7 },
  { sizeof(mirror_type_0::var_id_1.var_id_0.var_id_3),
    offsetof(mirror_type_0, var_id_1.var_id_0.var_id_3),
    ::cl::sycl::detail::parameter_class::user_defined,
    8 },
  { sizeof(mirror_type_0::var_id_1.var_id_0.var_id_4),
    offsetof(mirror_type_0, var_id_1.var_id_0.var_id_4),
    ::cl::sycl::detail::parameter_class::user_defined,
    9 },
  { sizeof(mirror_type_0::var_id_1.var_id_1.var_id_0.var_id_0),
    offsetof(mirror_type_0, var_id_1.var_id_1.var_id_0.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    10 },
  { sizeof(mirror_type_0::var_id_1.var_id_1.var_id_1),
    offsetof(mirror_type_0, var_id_1.var_id_1.var_id_1),
    ::cl::sycl::detail::parameter_class::user_defined,
    15 },
  { sizeof(mirror_type_0::var_id_1.var_id_1.var_id_2),
    offsetof(mirror_type_0, var_id_1.var_id_1.var_id_2),
    ::cl::sycl::detail::parameter_class::user_defined,
    16 },
  { sizeof(mirror_type_0::var_id_1.var_id_1.var_id_3),
    offsetof(mirror_type_0, var_id_1.var_id_1.var_id_3),
    ::cl::sycl::detail::parameter_class::user_defined,
    17 },
  { sizeof(mirror_type_0::var_id_1.var_id_1.var_id_4),
    offsetof(mirror_type_0, var_id_1.var_id_1.var_id_4),
    ::cl::sycl::detail::parameter_class::user_defined,
    18 }
}};
const std::array<::cl::sycl::detail::parameter_kind, 19> kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> >::arg_desc = {{
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - struct blas::LocalMemory<void, 1> */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global float * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class (unnamed) */,
  static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer - __global float * */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class cl::sycl::detail::device_index_array */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - signed char */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - const int */,
  static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal - class (unnamed) */,
}};
const char* kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> >::name = "SYCL__ZTSN4blas21ExpressionTreeFunctorILi1ENS_6AssignINS_10VectorViewIfN2cl4sycl8accessorIfLi1ELNS4_6access4modeE2ELNS6_6targetE1ELNS6_11placeholderE1EEEiiEESB_EENS_11LocalMemoryIvLi1EEEvEE";
const kernel_definition<19> kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> >::bin_info[] = {
  {&SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_info, {{false, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, false, }}},
  {0, {}}
};
const size_t kernel_info< ::blas::ExpressionTreeFunctor<1, ::blas::Assign< ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>, ::blas::VectorView<float, ::cl::sycl::accessor<float, 1, ::cl::sycl::access::mode::read_write, ::cl::sycl::access::target::global_buffer, ::cl::sycl::access::placeholder::true_t>, int, int>>, ::blas::LocalMemory<void, 1>, void> >::bin_count = 1;

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace cl {
namespace sycl {
namespace detail {
namespace {

const char* const SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_kernel_names[] {
"SYCL__ZTSN4blas21ExpressionTreeFunctorILi1ENS_6AssignINS_10VectorViewIfN2cl4sycl8accessorIfLi1ELNS4_6access4modeE2ELNS6_6targetE1ELNS6_11placeholderE1EEEiiEESB_EENS_11LocalMemoryIvLi1EEEvEE",
0
};

template <int N>
struct global_binaries_info;

// Specialization of global_binaries_info<0>
template <>
struct global_binaries_info<0> {
  static const size_t binCount;
  static const global_binary_info binInfo[];
};

COMPUTECPP_CLANG_CXX_DIAGNOSTIC(push)
COMPUTECPP_CLANG_CXX_DIAGNOSTIC(ignored "-Wunused-variable")
const global_binary_info global_binaries_info<0>::binInfo[] = {
  // Links to generated binary infos and kernel names lists.
  {&SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_info, SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_bin_spirv64_kernel_names},
  {nullptr, nullptr}
};

const size_t global_binaries_info<0>::binCount = 1;
COMPUTECPP_CLANG_CXX_DIAGNOSTIC(pop)

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
#endif // CODEPLAY_SYCL_copy_PolicyHandler_codeplay_policy_float_int_BufferIterator_float_codeplay_policy_BufferIterator_float_codeplay_policy_int_cpp_STUB
